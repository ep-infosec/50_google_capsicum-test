.\"
.\" Copyright (c) 2013 The FreeBSD Foundation
.\" Copyright (c) 2014 Google, Inc.
.\" All rights reserved.
.\"
.\" This documentation was written by Pawel Jakub Dawidek under sponsorship
.\" from the FreeBSD Foundation.
.\"
.\" %%%LICENSE_START(BSD_2_CLAUSE)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.TH CAP_RIGHTS_INIT 3 2014-05-21 "Linux" "Linux Programmer's Manual"
.SH NAME
cap_rights_init, cap_rights_set, cap_rights_clear, cap_rights_is_set,
cap_rights_is_valid, cap_rights_merge, cap_rights_remove,
cap_rights_contains \-  manage cap_rights_t structure
.SH SYNOPSIS
.nf
.B #include <sys/capsicum.h>
.sp
.BI "cap_rights_t *cap_rights_init(cap_rights_t * " rights ", ...);"
.br
.BI "cap_rights_t *cap_rights_set(cap_rights_t * " rights ", ...);"
.br
.BI "cap_rights_t *cap_rights_clear(cap_rights_t * " rights ", ...);"
.br
.BI "bool cap_rights_is_set(const cap_rights_t * " rights ", ...);"
.br
.BI "bool cap_rights_is_valid(const cap_rights_t * " rights ");"
.br
.BI "cap_rights_t *cap_rights_merge(cap_rights_t * " dst ", const cap_rights_t * " src ");"
.br
.BI "cap_rights_t *cap_rights_remove(cap_rights_t * " dst ", const cap_rights_t * " src ");"
.br
.BI "bool cap_rights_contains(cap_rights_t * " big ", const cap_rights_t * " little ");"
.SH DESCRIPTION
The functions documented here allow to manage the
.I cap_rights_t
structure.
.PP
Capsicum capability rights should be separated with commas when passed to the
.BR cap_rights_init (),
.BR cap_rights_set (),
.BR cap_rights_clear ()
and
.BR cap_rights_is_set ()
functions.
For example:
.PP
.in +4n
.nf
cap_rights_set(&rights, CAP_READ, CAP_WRITE, CAP_FSTAT, CAP_SEEK);
.fi
.PP
The complete list of the capability rights can be found in the
.BR rights (7)
manual page.
.PP
The
.BR cap_rights_init ()
function initializes the provided
.I cap_rights_t
structure.
Only a properly initialized structure can be passed to the remaining functions.
For convenience the structure can be filled with capability rights at
initialization instead of calling the
.BR cap_rights_set ()
function later.
Also for convenience, a pointer to the given structure is returned, so it can
be directly passed to
.BR cap_rights_limit (2):
.PP
.in +4n
.nf
cap_rights_t rights;
if (cap_rights_limit(fd, cap_rights_init(&rights, CAP_READ, CAP_WRITE)) < 0)
	err(1, "Unable to limit capability rights");
.fi
.PP
The
.BR cap_rights_set ()
function adds the given capability rights to the given
.I cap_rights_t
structure.
.PP
The
.BR cap_rights_clear ()
function removes the given capability rights from the given
.I cap_rights_t
structure.
.PP
The
.BR cap_rights_is_set ()
function checks if all the given capability rights are set for the given
.I cap_rights_t
structure.
.PP
The
.BR cap_rights_is_valid ()
function verifies if the given
.I cap_rights_t
structure is valid.
.PP
The
.BR cap_rights_merge ()
function merges all capability rights present in the
.I src
structure into the
.I dst
structure.
.PP
The
.BR cap_rights_remove ()
function removes all capability rights present in the
.I src
structure from the
.I dst
structure.
.PP
The
.BR cap_rights_contains
function checks if the
.I big
structure contains all capability rights present in the
.I little
structure.
.SH RETURN VALUES
The functions never fail.
In case an invalid capability right or an invalid
.I cap_rights_t
structure is given as an argument, the program will be aborted.
.PP
The
.BR cap_rights_init (),
.BR cap_rights_set ()
and
.BR cap_rights_clear ()
functions return a pointer to the
.I cap_rights_t
structure given in the
.I rights
argument.
.PP
The
.BR cap_rights_merge ()
and
.BR cap_rights_remove ()
functions return a pointer to the
.I cap_rights_t
structure given in the
.I dst
argument.
.PP
The
.BR cap_rights_is_set ()
returns
.I true
if all the given capability rights are set in the
.I rights
argument.
.PP
The
.BR cap_rights_is_valid ()
function performs various checks to see if the given
.I cap_rights_t
structure is valid and returns
.I true
if it is.
.PP
The
.BR cap_rights_contains ()
function returns
.I true
if all capability rights set in the
.I little
structure are also present in the
.I big
structure.
.SH EXAMPLE
The following example demonstrates how to prepare a
.I cap_rights_t
structure to be passed to the
.BR cap_rights_limit (2)
system call.
.PP
.in +4n
.nf
cap_rights_t rights;
int fd;

fd = open("/tmp/foo", O_RDWR);
if (fd < 0)
    err(1, "open() failed");

cap_rights_init(&rights, CAP_FSTAT, CAP_READ);

if (allow_write_and_seek)
    cap_rights_set(&rights, CAP_WRITE, CAP_SEEK);

if (dont_allow_seek)
    cap_rights_clear(&rights, CAP_SEEK);

if (cap_rights_limit(fd, &rights) < 0 && errno != ENOSYS)
   err(1, "cap_rights_limit() failed");
.fi
.SH SEE ALSO
.BR cap_rights_limit (7),
.BR open (2),
.BR capsicum (7) ,
.BR rights (7)
